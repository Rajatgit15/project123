{"version":3,"sources":["Header.js","LeftPanel.js","Team.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","console","log","className","projectId","LeftPanel","type","placeholder","data","map","el","i","key","to","id","title","Team","team","ele","name","email","designation","Component","Main","path","component","MainComponent","match","params","App","exact","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8RAeeA,EATA,SAACC,GAEZ,OADAC,QAAQC,IAAIF,GAER,yBAAKG,UAAW,UAAhB,gBACkBH,EAAMI,YCkBjBC,EArBG,WACd,OACI,yBAAKF,UAAU,SACf,2BAAQA,UAAY,SAASG,KAAO,OAAOC,YAAa,eACxD,6BACKC,EAAKC,KAAI,SAACC,EAAGC,GACT,OACI,yBAAKC,IAAOD,GACR,4BAAI,kBAAC,IAAD,CAAME,GAAE,WAASH,EAAGI,KAAOJ,EAAGK,YAK/C,gCCoBGC,E,uKAnCP,OACI,6BACKR,EAAKC,KAAI,SAACC,EAAGC,GAEV,OADAV,QAAQC,IAAIQ,GAER,yBAAKE,IAAOD,GACR,2BAAOR,UAAW,SACd,4BAAKO,EAAGK,OACPL,EAAGO,KAAKR,KAAI,SAACS,EAAIP,GACd,OACI,yBAAKC,IAAOD,GACR,4BACI,kCACA,oCACA,qCACA,4CAEJ,4BACR,4BAAKO,EAAIJ,IACT,4BAAKI,EAAIC,MACT,4BAAKD,EAAIE,OACT,4BAAKF,EAAIG,4B,GAvB1BC,aCuBJC,EAnBF,SAACvB,GAGV,OADIC,QAAQC,IAAIF,GAEZ,yBAAKG,UAAa,WACd,4BACA,kBAAC,IAAD,CAAMU,GAAE,UAAOb,EAAMI,UAAb,aAAR,WADA,IACyD,qCACzD,kBAAC,IAAD,CAAMS,GAAE,UAAOb,EAAMI,UAAb,UAAR,SAGA,kBAAC,IAAD,KAEA,kBAAC,IAAD,CAAOoB,KAAI,YAASxB,EAAMI,UAAf,SAAiCqB,UAAYT,OCR9DU,G,MAAgB,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAEtB,OADA1B,QAAQC,IAAIyB,GAER,6BAEI,kBAAC,EAAD,CAAQvB,UAAauB,EAAMC,OAAOxB,YAClC,kBAAC,EAAD,CAAMA,UAAauB,EAAMC,OAAOxB,YAEhC,kBAAC,EAAD,SAwBKyB,E,kDAjBb,WAAY7B,GAAO,uCACXA,G,qDAGN,OACE,kBAAC,IAAD,KACC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO8B,OAAK,EAACN,KAAS,KAAtB,uBACA,kBAAC,IAAD,CAAQA,KAAO,cAAcC,UAAYC,U,GAThCJ,aCbES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASP,MACvB,2DCRNQ,IAASC,OACP,kBAAC,IAAMC,WAAP,KAEE,kBAAC,EAAD,OAGFC,SAASC,eAAe,SDmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,a","file":"static/js/main.4146cfc0.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\n\r\n\r\nimport data from './data.json'\r\n\r\nconst Header = (props) => {\r\n    console.log(props)\r\n    return (\r\n        <div className =\"header\">\r\n            MY Project - {props.projectId}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;","\r\nimport React from 'react';\r\nimport data from './data.json'\r\n\r\nimport { BrowserRouter as Router, Link} from 'react-router-dom'\r\n\r\n\r\nconst LeftPanel = () => {\r\n    return (\r\n        <div className=\"panel\">\r\n        <input  className = \"search\" type = \"text\" placeholder =\"search ...\"/>\r\n        <div >\r\n            {data.map((el,i)=>{\r\n                 return(\r\n                     <div key = {i}>\r\n                         <li><Link to =  {`/${el.id}`}>{el.title}</Link></li>\r\n                     </div>\r\n                 )\r\n            })}\r\n\r\n            <h1>\r\n               \r\n            </h1>\r\n        </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LeftPanel;","import React, { Component } from 'react';\r\nimport data from './data.json'\r\n\r\nclass Team extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                {data.map((el,i)=>{\r\n                    console.log(el)\r\n                    return(\r\n                        <div key = {i}>\r\n                            <table className =\"table\">\r\n                                <tr>{el.title}</tr>\r\n                                {el.team.map((ele,i)=>{\r\n                                    return (\r\n                                        <div key = {i}>\r\n                                            <tr>\r\n                                                <th>id</th>\r\n                                                <th>name</th>\r\n                                                <th>email</th>\r\n                                                <th>designation</th>\r\n                                            </tr>\r\n                                            <tr>\r\n                                    <td>{ele.id}</td>\r\n                                    <td>{ele.name}</td>\r\n                                    <td>{ele.email}</td>\r\n                                    <td>{ele.designation}</td>\r\n                                            </tr>\r\n                                        </div>\r\n                                    )\r\n                                })}\r\n                            </table>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Team;","\r\nimport React from 'react';\r\nimport data from './data.json'\r\nimport { BrowserRouter as Router, Link,Switch, Route, Redirect} from 'react-router-dom'\r\nimport Team from './Team'\r\n\r\n\r\nconst Main = (props) => {\r\n\r\n        console.log(props)\r\n    return (\r\n        <div className  = \"content\">\r\n            <ul>\r\n            <Link to = {`${props.projectId}/summary`}>Summary</Link> <span> | </span> \r\n            <Link to = {`${props.projectId}/team`}>Team</Link> \r\n              \r\n            </ul>\r\n            <Switch>\r\n                \r\n            <Route path=  {`/:${props.projectId}/team`} component ={Team}></Route>\r\n            </Switch>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Main;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route,Switch } from 'react-router-dom'\n\nimport Header from './Header';\nimport LeftPanel from './LeftPanel';\nimport Main from './Main'\nimport './App.css'\nimport Team from './Team';\n\n\n\nconst MainComponent = ({match}) => {\n  console.log(match)\n  return (\n      <div>\n       \n          <Header projectId = {match.params.projectId} />\n          <Main projectId = {match.params.projectId}  />\n          \n          <LeftPanel />\n          \n      </div>\n  );\n};\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n  }\n  render() {\n    return (\n      <Router>\n       <Switch>\n         <Route exact path   = \"/\">No Project Selected</Route>\n         <Route  path = '/:projectId' component ={MainComponent} ></Route>\n\n        \n       </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    \n    <App />\n  \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}