{"version":3,"sources":["Team.js","App.js","serviceWorker.js","index.js"],"names":["Team","data","map","ele","i","key","className","team","el","id","name","email","designation","Component","Header","Layout","Sider","Footer","Content","routes","path","exact","sidebar","main","App","props","handleClick1","setState","isTitle","isSummary","isContent","isTeam","state","this","route","index","component","type","placeholder","to","onClick","e","preventDefault","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.94cad678.chunk.js","sourcesContent":["\r\nimport React, { Component } from 'react';\r\nimport data from './data.json'\r\n\r\nclass Team extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                {data.map((ele, i)=>{\r\n                    return(\r\n                        <div key = {i}>\r\n                            <table className= \"table\">\r\n                               \r\n                                {\r\n                                    ele.team.map((el,i)=>{\r\n                                        return(\r\n                                            <div>\r\n                                                <tr>\r\n                                                    <th>\r\n                                                        id\r\n                                                    </th>\r\n                                                    <th>name</th>\r\n                                                    <th>email</th>\r\n                                                    <th>designation</th>\r\n                                                </tr>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        {el.id}\r\n                                                    </td>\r\n                                                    <td>{el.name}</td>\r\n                                                    <td>{el.email}</td>\r\n                                                    <td>{el.designation}</td>\r\n                                                </tr>\r\n                                            </div>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </table>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Team;","import React from 'react';\nimport { Layout } from 'antd';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom'\nimport Team from './Team'\nimport Summary from './Summary'\n\nimport './App.css';\n\n\nconst { Header, Footer, Sider, Content } = Layout;\n\nconst routes = [\n  {\n    path: \"/\",\n    exact: true,\n    sidebar: () => <div></div>,\n\n  },\n  {\n    path: \"/proj-1\",\n\n    sidebar: () => <h1>My Projects-Project 1</h1>,\n    main: ()=> <h1>My Projects-Project 1</h1>\n\n  },\n  {\n    path: \"/proj-2\",\n\n    sidebar: () => <h1>My Projects-Project 2</h1>,\n     main: ()=> <h1>My Projects-Project 2</h1>\n  },\n  {\n    path: \"/proj-3\",\n\n    sidebar: () => <h1>My Projects-Project 3</h1>,\n    main: ()=> <h1>My Projects-Project 3</h1>\n\n  },\n  {\n    path: \"/proj-4\",\n\n    sidebar: () => <h1>My Projects-Project 4</h1>,\n    main: ()=> <h1>My Projects-Project 4</h1>\n\n  }\n]\n\nconst Project1 =({match}) =>{\n  return(\n    <h1>{match.prams.summ}</h1>\n  )\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      \n      isTeam: false,\n      isTitle: false,\n      isContent: false,\n      isSummary:false\n    }\n  }\n\n\n\n  handleClick1 = () => {\n    \n    this.setState({\n      isTitle: true,\n      isSummary:true,\n      isContent:true,\n      isTeam: true\n    })\n  }\n\n  render() {\n\n    return (\n      <Router>\n        <div>\n          <Layout>\n            <Header className=\"header-main\">\n\n              {this.state.isTitle ? routes.map((route,index) => (\n          \n                <Route\n                key = {index}\n                path= {route.path}\n                exact = {route.exact}\n                  component={route.sidebar}\n                />\n\n              )) : <h1>My Project</h1>}\n            </Header>\n\n            <Layout>\n              <Sider  className = \"sider\">\n                <input className=\"search\" type=\"text\" placeholder=\"search...\" />\n\n                <Link to=\"/\"></Link><br />\n                <li className=\"link\"><Link   onClick={this.handleClick1} to=\"/proj-1/summary\"><h1>Project1</h1></Link><div>Owner: XYZ, Date: 19/05/2020</div></li><br />\n                <li className=\"link\"><Link onClick={this.handleClick1} to=\"/proj-2/summary\"><h1>Project 2</h1></Link><div>Owner: XYZ, Date: 19/05/2020</div></li><br />\n                <li className=\"link\"><Link onClick={this.handleClick1} to=\"/proj-3/summary\"><h1>Project 3</h1></Link><div>Owner: XYZ, Date: 19/05/2020</div></li><br />\n                <li className=\"link\"><Link onClick={this.handleClick1} to=\"/proj-4/summary\"><h1>Project 4</h1></Link><div>Owner: XYZ, Date: 19/05/2020</div></li><br />\n\n              </Sider>\n              <Layout>\n                \n                <Content className=\"content\">\n                  <div className=\"link-header\">\n                    \n                    \n                    {this.state.isSummary ? \n                     <Link  to=\"/proj-1/summary\" >Summary</Link> :\n                     <Link onClick = {e=> e.preventDefault()} to=\"/proj-1/summary\" >Summary</Link>}<span> | </span>\n\n\n                   {this.state.isTeam ? \n                   <Link   to=\"/proj-1/team\">Team Details</Link>:\n                   <Link onClick = {e=> e.preventDefault()}  to=\"/proj-1/team\">Team Details</Link>}\n                  </div>\n\n                  {/* <Route path=\"/proj-1234/summary\"  component = {Project1} > </Route> */}\n                  \n\n                  \n                  <Route exact path=\"/proj-1/team\"> {this.state.isTeam ? <Team /> : \"\"} </Route>\n                  \n                  {this.state.isContent ? <h1 className=\"title-wip\">welcome to wipro</h1> : <h1>No project Selected</h1>}\n                </Content>\n                   \n              </Layout>\n            </Layout>\n          </Layout>\n        </div>\n      </Router>\n    )\n  }\n}\n\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    \n    <App />\n  \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}