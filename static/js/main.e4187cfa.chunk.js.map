{"version":3,"sources":["Team.js","Summary.js","App.js","serviceWorker.js","index.js"],"names":["Team","data","map","el","i","key","className","id","title","description","sponsor","name","email","designation","metadata","lastUpdateddate","createDate","Component","Summary","Header","Layout","Sider","Footer","Content","routes","path","exact","sidebar","App","props","handleClick1","setState","isTitle","isSummary","isTeam","state","this","route","component","type","placeholder","to","onClick","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e4187cfa.chunk.js","sourcesContent":["\r\nimport React, { Component } from 'react';\r\nimport data from './data.json'\r\n\r\nclass Team extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                {data.map((el,i)=>{\r\n                    return (\r\n                        <div key = {i}>\r\n                            <table className = \"table\">\r\n                                  <tr>\r\n                                      <th>Id</th>\r\n                                      <th>title</th>\r\n                                      <th>description</th>\r\n                                      <th >sponsor</th>\r\n                                      <td ></td>\r\n                                      <td ></td>\r\n                                      <td >Metadata</td>\r\n                                  </tr>\r\n\r\n                                <tr>\r\n                                    <td>{el.id}</td>\r\n                                    <td>{el.title}</td>\r\n                                    <td>{el.description}</td>\r\n                                    <td>{el.sponsor.id}</td>\r\n                                    <td>{el.sponsor.name}</td>\r\n                                    <td>{el.sponsor.email}</td>\r\n                                    <td>{el.sponsor.designation}</td>\r\n                                    <td>{el.metadata.lastUpdateddate}</td>\r\n                                    <td>{el.metadata.createDate}</td>\r\n                                    {/* {el.team.map((te,i)=>{\r\n                                    return <div key = {i}>\r\n                                        <tr>\r\n                                            <td>{te.id}</td>\r\n                                            <td>{te.name}</td>\r\n                                            <td>{te.email}</td>\r\n                                            <td>{te.designation}</td>\r\n                                        </tr>\r\n                                    </div>\r\n                                })} */}\r\n                                </tr>\r\n                               \r\n                            </table>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Team;","\r\n\r\nimport React, { Component } from 'react';\r\n\r\nclass Summary extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                This is the summary of the project...\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Summary;","import React from 'react';\nimport { Layout } from 'antd';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom'\nimport Team from './Team'\nimport Summary from './Summary'\n\nimport './App.css';\n\n\nconst { Header, Footer, Sider, Content } = Layout;\n\nconst routes = [\n  {\n    path: \"/\",\n    exact: true,\n    sidebar: () => <div></div>,\n\n  },\n  {\n    path: \"/proj-1\",\n\n    sidebar: () => <h1>My Projects-Project 1</h1>,\n\n  },\n  {\n    path: \"/proj-2\",\n\n    sidebar: () => <h1>My Projects-Project 2</h1>,\n\n  },\n  {\n    path: \"/proj-3\",\n\n    sidebar: () => <h1>My Projects-Project 3</h1>,\n\n  },\n  {\n    path: \"/proj-4\",\n\n    sidebar: () => <h1>My Projects-Project 4</h1>,\n\n  }\n]\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      isSummary: false,\n      isTeam: false,\n      isTitle: false\n    }\n  }\n\n\n\n  handleClick1 = () => {\n    this.setState({\n      isTitle: true,\n      isSummary: true,\n      isTeam: true\n    })\n  }\n\n  render() {\n\n    return (\n      <Router>\n        <div>\n          <Layout>\n            <Header className=\"header-main\">\n\n              {this.state.isTitle ? routes.map((route) => (\n\n                <Route\n                  key={route.path}\n                  path={route.path}\n                  exact={route.exact}\n                  component={route.sidebar}\n                />\n\n              )) : <h1>No Project Selected</h1>}\n            </Header>\n\n            <Layout>\n              <Sider  className = \"sider\">\n                <input className=\"search\" type=\"text\" placeholder=\"search...\" />\n\n                <Link to=\"/\"></Link><br />\n                <li className=\"link\"><Link onClick={this.handleClick1} to=\"/proj-1\"><h1>Project 1</h1></Link><div>Owner: XYZ, Date: 19/05/2020</div></li><br />\n                <li className=\"link\"><Link onClick={this.handleClick1} to=\"/proj-2\"><h1>Project 2</h1></Link><div>Owner: XYZ, Date: 19/05/2020</div></li><br />\n                <li className=\"link\"><Link onClick={this.handleClick1} to=\"/proj-3\"><h1>Project 3</h1></Link><div>Owner: XYZ, Date: 19/05/2020</div></li><br />\n                <li className=\"link\"><Link onClick={this.handleClick1} to=\"/proj-4\"><h1>Project 4</h1></Link><div>Owner: XYZ, Date: 19/05/2020</div></li><br />\n\n              </Sider>\n              <Layout>\n\n                <Content className=\"content\">\n                  <div className=\"link-header\">\n                    <Link to=\"/proj-123/summary\">Summary</Link><span> | </span>\n                    <Link to=\"/proj-123/team\">Team Details</Link>\n                  </div>\n\n                  <Route path=\"/proj-123/summary\" > {this.state.isSummary ? <Summary /> : \"\"}</Route>\n                  <Route exact path=\"/proj-123/team\"> {this.state.isTeam ? <Team /> : \"\"} </Route>\n\n                </Content>\n\n              </Layout>\n            </Layout>\n          </Layout>\n        </div>\n      </Router>\n    )\n  }\n}\n\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    \n    <App />\n  \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}